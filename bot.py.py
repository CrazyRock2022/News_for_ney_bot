import asyncio
import logging
import os
import sqlite3
import feedparser
from datetime import datetime, timedelta
from typing import Optional, List, Dict

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from openai import OpenAI, APIConnectionError, RateLimitError, OpenAIError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default_parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
scheduler = AsyncIOScheduler()

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏
NEWS_SOURCES = [
    "https://forklog.com/feed/",
    "https://ru.cointelegraph.com/rss",
    "https://bits.media/rss/news/",
    "https://incrypted.com/feed/",
    "https://cryptopanic.com/news/rss/",
    "https://cointelegraph.com/rss",
    "https://decrypt.co/feed",
    "https://www.coindesk.com/arc/outboundfeeds/rss/?outputType=xml",
    "https://www.cbr.ru/rss/",
    "http://www.finmarket.ru/rss/",
    "https://rssexport.rbc.ru/rbcnews/news/eco/index.rss",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://www.forbes.ru/rss",
    "https://24.kg/rss/",
    "https://akipress.org/rss/news.rss",
    "https://www.themoscowtimes.com/rss",
    "https://blogs.imf.org/feed/",
    "https://www.bis.org/rss/home.xml"
]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
sent_links_cache = set()
user_prompts: Dict[int, str] = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class WaitingPrompt(StatesGroup):
    waiting_for_prompt = State()

# –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: OpenAI ‚Üí OpenRouter ‚Üí –∫–ª—é—á–∏
async def gpt_check(prompt: str) -> str:
    messages = [
        {"role": "system", "content": "–¢—ã –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."},
        {"role": "user", "content": prompt}
    ]
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None,
            lambda: client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                temperature=0
            )
        )
        reply = response.choices[0].message.content.strip()
        logger.info(f"[OpenAI GPT] –û—Ç–≤–µ—Ç: {reply}")
        return reply
    except (RateLimitError, APIConnectionError, OpenAIError) as e:
        logger.warning(f"[OpenAI GPT] –û—à–∏–±–∫–∞: {e}, –ø—Ä–æ–±—É–µ–º OpenRouter...")

    try:
        client = OpenAI(api_key=OPENROUTER_API_KEY, base_url="https://openrouter.ai/api/v1")
        response = await loop.run_in_executor(
            None,
            lambda: client.chat.completions.create(
                model="openchat/openchat-3.5-0106",
                messages=messages,
                temperature=0
            )
        )
        reply = response.choices[0].message.content.strip()
        logger.info(f"[OpenRouter] –û—Ç–≤–µ—Ç: {reply}")
        return reply
    except Exception as e:
        logger.error(f"[OpenRouter] –û—à–∏–±–∫–∞: {e}")
        return None

async def multi_filter(text: str, prompt: str) -> str:
    try:
        result = await gpt_check(prompt + f"\n\n–ù–æ–≤–æ—Å—Ç—å:\n{text}")
        if result and "–¥–∞" in result.lower():
            return "relevant"
        elif result and "–≤–æ–∑–º–æ–∂–Ω–æ" in result.lower():
            return "possible"
        else:
            return "irrelevant"
    except Exception as e:
        logger.warning(f"GPT —É–ø–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {e}")

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ fallback
    keywords = ["–∫—Ä–∏–ø—Ç–∞", "—Ç–æ–∫–µ–Ω", "—Ä—É–±–ª—å", "—Ü–∏—Ñ—Ä–æ–≤–æ–π", "CBDC", "—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω", "–±–ª–æ–∫—á–µ–π–Ω", "—Ä–µ–≥—É–ª—è—Ç–æ—Ä"]
    for word in keywords:
        if word in text.lower():
            return "relevant"
    return "irrelevant"

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–ø—Ä–∞–≤–∫–∞", callback_data="help")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ A7A5.\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT "
        "–∏ –ø—Ä–∏—Å—ã–ª–∞—é —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.",
        reply_markup=kb.as_markup()
    )

# –ö–æ–º–∞–Ω–¥–∞ /help –∏ –∫–Ω–æ–ø–∫–∞
@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    await callback.message.edit_text(
        "/digest ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç."
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "/digest ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç."
    )

# –ö–æ–º–∞–Ω–¥–∞ /digest
@router.message(Command("digest"))
async def cmd_digest(message: Message, state: FSMContext):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    articles, stats = await get_news(message.from_user.id)

    relevant, possible, irrelevant = [], [], []
    for a in articles:
        if a["status"] == "relevant":
            relevant.append(a)
        elif a["status"] == "possible":
            possible.append(a)
        else:
            irrelevant.append(a)

    found = len(relevant) + len(possible)
    if found == 0:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º—Ç", callback_data="prompt_retry")]]
        )
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:", reply_markup=kb)
        await state.set_state(WaitingPrompt.waiting_for_prompt)
        return

    text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
    for src, s in stats.items():
        text += f"{src} ‚Äî –≤—Å–µ–≥–æ {s['t']}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö {s['r']}, –≤–æ–∑–º–æ–∂–Ω–æ {s['p']}, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö {s['i']}\n"
    text += f"\n<b>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:</b> {found} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="show_news")]]
    )
    await state.update_data(relevant=relevant, possible=possible)
    await message.answer(text, reply_markup=kb)

# –ö–æ–º–∞–Ω–¥–∞ /status
@router.message(Command("status"))
async def cmd_status(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.\n"
                         "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: GPT ‚Üí OpenRouter ‚Üí –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                         f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(NEWS_SOURCES)}\n"
                         f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(sent_links_cache)}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
async def get_news(user_id: int) -> (List[dict], Dict[str, dict]):
    result = []
    stats = {}
    user_prompt = user_prompts.get(user_id)
    use_custom_prompt = user_prompt is not None

    for url in NEWS_SOURCES:
        try:
            feed = feedparser.parse(url)
            entries = feed.entries
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ RSS {url}: {e}")
            continue

        for entry in entries:
            title = entry.get("title", "").strip()
            link = entry.get("link", "").strip()
            summary = entry.get("summary", "")
            content = entry.get("content", [{}])[0].get("value", "")

            if link in sent_links_cache:
                continue

            pub_time = None
            if "published_parsed" in entry:
                pub_time = datetime(*entry.published_parsed[:6])
            elif "updated_parsed" in entry:
                pub_time = datetime(*entry.updated_parsed[:6])
            else:
                continue

            if datetime.utcnow() - pub_time > timedelta(days=7):
                continue

            prompt = (
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {summary}\n–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:1000]}\n\n"
                "–ú–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –ø—Ä–æ–µ–∫—Ç—É A7A5, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ä—É–±–ª—é, —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º?"
                if not use_custom_prompt else user_prompt
            )

            verdict = await multi_filter(f"{title}\n\n{summary}", prompt)
            stats.setdefault(url, {"r": 0, "p": 0, "i": 0, "t": 0})
            stats[url]["t"] += 1
            stats[url][verdict[0]] += 1

            result.append({
                "title": title,
                "link": link,
                "status": verdict,
                "source": url
            })
            sent_links_cache.add(link)

    return result, stats

# –ö–Ω–æ–ø–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
@router.callback_query(F.data == "show_news")
async def show_news(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    relevant_news = data.get("relevant", [])
    possible_news = data.get("possible", [])

    if not relevant_news and not possible_news:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    await callback.message.answer("üì∞ –í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    for item in relevant_news + possible_news:
        await callback.message.answer(f"<b>{item['title']}</b>\n{item['link']}")

# –ö–Ω–æ–ø–∫–∞: –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º—Ç
@router.callback_query(F.data == "prompt_retry")
async def retry_prompt(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WaitingPrompt.waiting_for_prompt)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç:")

# –í–≤–æ–¥ –ø—Ä–æ–º—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(WaitingPrompt.waiting_for_prompt)
async def receive_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 10:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="prompt_retry")]]
        )
        await message.answer("–ü—Ä–æ–º—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=kb)
        return

    user_prompts[message.from_user.id] = prompt
    await message.answer("–ü–æ–Ω—è–ª! –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    await state.clear()
    await cmd_digest(message, state)

# –†–∞—Å—Å—ã–ª–∫–∞
async def scheduled_job():
    for uid in list(user_prompts.keys()):
        try:
            await bot.send_message(uid, "‚è∞ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: /digest")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

# Main
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    scheduler.add_job(scheduled_job, trigger="cron", hour=11, minute=0)
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())