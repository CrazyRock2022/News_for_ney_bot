# -*- coding: utf-8 -*-
import os
import logging
import asyncio
import feedparser
import sqlite3
import json
import yaml
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not all([API_TOKEN, OPENAI_API_KEY]):
    raise ValueError("Missing required environment variables")

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ==================== –ú–û–î–£–õ–ò ====================
class StatsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite"""
    def __init__(self):
        self.conn = sqlite3.connect('stats.db', check_same_thread=False)
        self._create_table()

    def _create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.conn:
            self.conn.execute('''CREATE TABLE IF NOT EXISTS stats
                (source TEXT PRIMARY KEY, total INTEGER, passed INTEGER)''')

    def update(self, source: str, passed: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.conn:
            self.conn.execute('''INSERT OR IGNORE INTO stats VALUES (?, 0, 0)''', (source,))
            self.conn.execute('''UPDATE stats SET total = total + 1, passed = passed + ? 
                              WHERE source = ?''', (int(passed), source))

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.conn:
            cur = self.conn.execute('SELECT * FROM stats')
            return {row[0]: {'total': row[1], 'passed': row[2]} for row in cur}

class SourceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ RSS"""
    def __init__(self):
        self.sources_file = Path("sources.json")
        self._init_file()

    def _init_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        if not self.sources_file.exists():
            self.sources_file.write_text('["https://forklog.com/feed/"]')

    def get_sources(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return json.loads(self.sources_file.read_text(encoding='utf-8'))

    def add_source(self, url: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        sources = self.get_sources()
        sources.append(url)
        self.sources_file.write_text(json.dumps(sources), encoding='utf-8')

class KeywordManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    def __init__(self):
        self.keywords_file = Path("keywords.yaml")
        self._init_file()

    def _init_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        if not self.keywords_file.exists():
            self.keywords_file.write_text(yaml.dump(["–∫—Ä–∏–ø—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω"]))

    def get_keywords(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        return yaml.safe_load(self.keywords_file.read_text())

    def add_keyword(self, keyword: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        keywords = self.get_keywords()
        keywords.append(keyword)
        self.keywords_file.write_text(yaml.dump(keywords))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
stats = StatsManager()
sources = SourceManager()
keywords = KeywordManager()

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="filter_menu")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
    builder.adjust(2, 1)
    return builder.as_markup()

def filters_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="set_filter_keywords")
    builder.button(text="ü§ñ OpenAI", callback_data="set_filter_openai")
    builder.button(text="üöÄ OpenRouter", callback_data="set_filter_openrouter")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2, 1)
    return builder.as_markup()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
@router.message(CommandStart())
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "filter_menu")
async def filter_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.message.edit_text("üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_menu_keyboard())

@router.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats_data = stats.get_stats()
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n\n"
    for source, data in stats_data.items():
        text += f"{source}:\nüîπ –í—Å–µ–≥–æ: {data['total']}\nüîπ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö: {data['passed']}\n\n"
    await callback.message.edit_text(text)

# ==================== –ó–ê–ü–£–°–ö ====================
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
