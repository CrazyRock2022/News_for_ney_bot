import asyncio
import logging
import os
import feedparser
from datetime import datetime, timedelta
from typing import Optional, List, Dict

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, CommandStart
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
import openai

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")

openai.api_key = OPENAI_API_KEY
openai.api_base = "https://api.openai.com/v1"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# --- Telegram init ---
bot = Bot(token=API_TOKEN, default_parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
scheduler = AsyncIOScheduler()
sent_links_cache = set()
user_prompts: Dict[int, str] = {}
last_status: Dict[str, str] = {"time": "–Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è", "method": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "error": None}

class WaitingPrompt(StatesGroup):
    waiting_for_prompt = State()

NEWS_SOURCES = [
    "https://forklog.com/feed/",
    "https://ru.cointelegraph.com/rss",
    "https://bits.media/rss/news/",
    "https://incrypted.com/feed/",
    "https://cryptopanic.com/news/rss/",
    "https://cointelegraph.com/rss",
    "https://decrypt.co/feed",
    "https://www.coindesk.com/arc/outboundfeeds/rss/?outputType=xml",
    "https://www.cbr.ru/rss/",
    "http://www.finmarket.ru/rss/",
    "https://rssexport.rbc.ru/rbcnews/news/eco/index.rss",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://www.forbes.ru/rss",
    "https://24.kg/rss/",
    "https://akipress.org/rss/news.rss",
    "https://www.themoscowtimes.com/rss",
    "https://blogs.imf.org/feed/",
    "https://www.bis.org/rss/home.xml"
]

KEYWORDS = ["–∫—Ä–∏–ø—Ç–∞", "—Ç–æ–∫–µ–Ω", "–±–ª–æ–∫—á–µ–π–Ω", "—Ä—É–±–ª—å", "CBDC", "—Ä–µ–≥—É–ª—è—Ç–æ—Ä", "stablecoin", "—Ü–∏—Ñ—Ä–æ–≤–æ–π", "–∞—Å—Å–µ—Ç", "decentralized"]

# --- –§–ò–õ–¨–¢–†–ê–¢–û–† –° –¢–†–ï–ú–Ø –£–†–û–í–ù–Ø–ú–ò ---

async def multi_filter(prompt: str) -> str:
    global last_status

    try:
        # === OpenAI GPT ===
        openai.api_key = OPENAI_API_KEY
        openai.api_base = "https://api.openai.com/v1"
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=5,
                temperature=0,
            )
        )
        last_status.update({"method": "OpenAI GPT", "error": None})
        return response.choices[0].message.content.strip().lower()

    except Exception as e:
        logger.warning(f"GPT-–æ—à–∏–±–∫–∞: {e}")
        last_status.update({"method": "OpenRouter", "error": "OpenAI GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"})

        try:
            # === OpenRouter ===
            client = openai.OpenAI(
                api_key=OPENROUTER_KEY,
                base_url="https://openrouter.ai/api/v1"
            )
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: client.chat.completions.create(
                    model="openchat/openchat-3.5-0106",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=5,
                    temperature=0,
                )
            )
            last_status.update({"method": "OpenRouter", "error": None})
            return response.choices[0].message.content.strip().lower()

        except Exception as e2:
            logger.warning(f"OpenRouter –æ—à–∏–±–∫–∞: {e2}")
            last_status.update({"method": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "error": "–í—Å–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"})

            # === –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ===
            for word in KEYWORDS:
                if word.lower() in prompt.lower():
                    return "–¥–∞"
            return "–Ω–µ—Ç"

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–ø—Ä–∞–≤–∫–∞", callback_data="help")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ A7A5 ü§ñ\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
        "–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=kb.as_markup()
    )

@router.message(Command("help"))
@router.callback_query(F.data == "help")
async def help_handler(event):
    msg = (
        "üìå <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        "/digest ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚úçÔ∏è –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç –≤—Ä—É—á–Ω—É—é."
    )
    if isinstance(event, Message):
        await event.answer(msg)
    else:
        await event.message.edit_text(msg)
@router.message(Command("digest"))
async def cmd_digest(message: Message, state: FSMContext):
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    user_prompt = user_prompts.get(message.from_user.id)
    articles = await get_news(message.from_user.id, user_prompt)

    stats = {}
    relevant, possible, irrelevant = [], [], []

    for art in articles:
        source = art["source"]
        stats.setdefault(source, {"r": 0, "p": 0, "i": 0, "t": 0})
        stats[source]["t"] += 1
        if art["status"] == "relevant":
            stats[source]["r"] += 1
            relevant.append(art)
        elif art["status"] == "possible":
            stats[source]["p"] += 1
            possible.append(art)
        else:
            stats[source]["i"] += 1
            irrelevant.append(art)

    found = len(relevant) + len(possible)
    last_status["time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if found == 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç", callback_data="prompt_retry")]
        ])
        await message.answer("üòï –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
                             "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:", reply_markup=kb)
        await state.set_state(WaitingPrompt.waiting_for_prompt)
        return

    text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
    for source, s in stats.items():
        text += f"{source} ‚Äî –≤—Å–µ–≥–æ {s['t']}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö {s['r']}, –≤–æ–∑–º–æ–∂–Ω–æ {s['p']}, –¥—Ä—É–≥–∏—Ö {s['i']}\n"
    text += f"\n<b>–í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö:</b> {found}\n–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: <i>{last_status['method']}</i>"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="show_news")]]
    )
    await state.update_data(relevant=relevant, possible=possible)
    await message.answer(text, reply_markup=kb)

@router.message(Command("status"))
async def cmd_status(message: Message):
    text = (
        f"üìå <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:</b>\n"
        f"–í—Ä–µ–º—è: {last_status['time']}\n"
        f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {last_status['method']}\n"
        f"–û—à–∏–±–∫–∞: {last_status['error'] or '–Ω–µ—Ç'}"
    )
    await message.answer(text)

@router.callback_query(F.data == "prompt_retry")
async def retry_prompt(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WaitingPrompt.waiting_for_prompt)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç:")

@router.message(WaitingPrompt.waiting_for_prompt)
async def receive_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 10:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="prompt_retry")]
        ])
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=kb)
        return
    user_prompts[message.from_user.id] = prompt
    await message.answer("üîÅ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    await state.clear()
    await cmd_digest(message, state)

@router.callback_query(F.data == "show_news")
async def show_news(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    relevant_news = data.get("relevant", [])
    possible_news = data.get("possible", [])
    if not relevant_news and not possible_news:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    await callback.message.answer("üì∞ –í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    for item in relevant_news + possible_news:
        await callback.message.answer(f"<b>{item['title']}</b>\n{item['link']}")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
async def get_news(user_id: int, user_prompt: Optional[str]) -> List[dict]:
    result = []
    for url in NEWS_SOURCES:
        try:
            feed = feedparser.parse(url)
            entries = feed.entries
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ RSS {url}: {e}")
            continue

        for entry in entries:
            title = entry.get("title", "").strip()
            link = entry.get("link", "").strip()
            summary = entry.get("summary", "")
            content = entry.get("content", [{}])[0].get("value", "")

            if link in sent_links_cache:
                continue

            pub_time = None
            if "published_parsed" in entry:
                pub_time = datetime(*entry.published_parsed[:6])
            elif "updated_parsed" in entry:
                pub_time = datetime(*entry.updated_parsed[:6])
            else:
                continue

            if datetime.utcnow() - pub_time > timedelta(days=7):
                continue

            prompt = (
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {summary}\n–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:1000]}\n\n"
                "–ú–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –ø—Ä–æ–µ–∫—Ç—É A7A5, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ä—É–±–ª—é, —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º?"
                if not user_prompt else user_prompt
            )

            verdict = await multi_filter(prompt)
            status = "irrelevant"
            if "–¥–∞" in verdict:
                status = "relevant"
            elif "–≤–æ–∑–º–æ–∂–Ω–æ" in verdict or "–Ω–µ —É–≤–µ—Ä–µ–Ω" in verdict:
                status = "possible"

            result.append({
                "title": title,
                "link": link,
                "status": status,
                "source": url
            })
            sent_links_cache.add(link)
    return result

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
async def scheduled_job():
    for uid in list(user_prompts.keys()):
        try:
            await bot.send_message(uid, "‚è∞ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: /digest")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

# --- MAIN ---
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    scheduler.add_job(scheduled_job, trigger="cron", hour=11, minute=0)
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    


